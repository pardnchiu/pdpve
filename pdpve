#!/bin/bash

program_name="pdpve"
app_version="v0.1.0"
app_path=/usr/local/sbin/$program_name
app_module_path=/usr/local/bin/$program_name
github="https://github.com/pardnchiu/pdpve.git"
current_kernel=$(uname -r)

param2=$2
param3=$3
param4=$4

function _SHOW_TIP {
  printf "█▀▄ █▀▄ █▀▄ █ █ █▀▀\n"
  printf "█▀  █ █ █▀  █ █ █▀▀\n"
  printf "▀   ▀▀  ▀    ▀  ▀▀▀\n"
  printf "By 邱敬幃 Pardn Chiu [dev@pardn.io]\n"
	printf "___________________________________________\n\n"
	printf "  qm, qemu      虛擬機\n"
	printf "  ip, findip    連接裝置\n"
	printf "  c,  cpu       CPU\n"
	printf "  f,  fan       FAN\n"
	printf "  k,  kernel    PVE 核心\n"
	printf "  u,  update    更新套件\n"
	printf "  v,  version   顯示 $program_name 版本\n"
	printf "  r,  remove    移除 $program_name\n"
	printf "  h,  help      顯示 $program_name 指令\n"
  printf "  bye           停止動作\n"
	printf "___________________________________________\n\n"
}

function _INSTALL() {
  cp -f $0 $app_path
  chmod +x $app_path
  
  mkdir -p $app_module_path
  cp -rf ./module $app_module_path/
  chmod -R +x $app_module_path/module/*
  
  printf "[*] 已安裝 $program_name 至系統\n"
  printf "[*] 當前 $program_name 版本為 $app_version\n"
  printf "[*] 後續可以直接執行 \"$program_name\" 來使用\n"
}

function _REMOVE() {
  if [ -e $app_path ]; then
    read -p "[-] 是否從系統中移除 $program_name? [y/N] " -n 1 -r
    printf "\n"
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      rm -f $app_path
      rm -rf $app_module_path
      printf "[*] 已成功從系統中移除 $program_name\n"
      exit 1
    fi
  else
    printf "[!] 並未安裝 $program_name.\n"
  fi
}

function _CHECK_INSTALL() {
  isDiff=false

  # 已安裝
  if [ -e $app_path ]; then
    # 取得已安裝的版本號
    installedVersion=$($app_path -v | awk '{printf $0}')

    # 版本號不相同
    if [ $app_version != $installedVersion ]; then
        printf "\n[!] 版本號不相同 (當前: $installedVersion | 新: $app_version)\n"
        printf "[*] 安裝會直接覆蓋當前版本"
        isDiff=true
    fi
  # 未安裝
  else
    _INSTALL
  fi

  # 版本不相同
  if [ $isDiff == true ]; then
    printf "\n"
    read -p "[-] 是否更換版本至 $app_version? [y/N]" -n 1 -r
    printf "\n"

    if [[ $REPLY =~ ^[Yy]$ ]]; then
      _INSTALL
    fi
  fi
}

function _INIT {
  clear
	if [[ $EUID -ne 0 ]]; then
		printf "[!] 無 root 權限.\n"
		exit 1
	fi
  _CHECK_INSTALL
}

function _CALL_MODULE() {
  local NAME="$1"
  
  # 檢查模組是否存在
  if [ -f "./module/${NAME}" ]; then
    bash "./module/${NAME}" "${@:2}"
  elif [ -f "$app_module_path/module/${NAME}" ]; then
    bash "$app_module_path/module/${NAME}" "${@:2}"
  else
    printf "[!] 找不到模組: %s\n" "$NAME"
  fi
}

function _UPDATE() {
	apt update
	apt upgrade -y
	apt autoremove -y
	apt autoclean -y
	apt clean
}

function _UPDATE_VERSION() {
	printf "[*] 下載最新資料\n"
  git clone $github /tmp/pdpve
  if [ $? -ne 0 ]; then
    printf "[!] 無法下載最新版本，請檢查網路連線或 GitHub 狀態。\n"
    exit 1
  fi
  printf "[*] 更新 $program_name\n"
  cp -f /tmp/pdpve/pdpve $app_path
  chmod +x $app_path
  if [ -d "/tmp/pdpve/module" ]; then
    mkdir -p $app_module_path
    cp -rf /tmp/pdpve/module $app_module_path/
    chmod -R +x $app_module_path/module/*
    printf "[*] 已更新 module 目錄至 $app_module_path/module/\n"
  fi
  printf "[*] 已更新 $program_name 至 $app_path\n"
  printf "[*] 執行 \"$program_name\" 來使用\n"
  printf "[*] 執行 \"$program_name -r\" 來解除安裝.\n"
  printf "[*] 更新完成，請重新啟動程式以應用新版本。\n"
  rm -rf /tmp/pdpve
  exit 1
}

function _DO() {
	while true; do
    _SHOW_TIP
	  read -p "[-] 請選擇動作: " -r
		case "$REPLY" in
		k | kernel)
      _CALL_MODULE "kernel" "${@:2}"
      clear
      _DO
      break
			;;
		u | update)
			_UPDATE
			;;
		qm | --qemu)
			_CALL_MODULE "qm" "${@:2}"
      _DO
			;;
		ip | findip)
			_CALL_MODULE "find-ip" "${@:2}"
			;;
		c | cpu)
      _CALL_MODULE "cpu" "${@:2}"
			;;
		f | fan)
			_CALL_MODULE "fan" "${@:2}"
			;;
		v | version)
      printf "$app_version\n"
      _CHECK_INSTALL
			;;
		r | remove)
			_INIT
			_REMOVE
			;;
		h | help)
			_INIT
			;;
    bye)
      exit 0
      ;;
		*)
      printf "無效的選項: $REPLY\n\n"
      ;;
		esac
		printf "按 Enter 繼續..."
		read -r
		clear
	done
	exit 1
}

while true; do
	case "$1" in
	-k | --kernel)
	  printf "$current_kernel\n"
    break 
    ;;
	-u | --update)
		_UPDATE 
    ;;
	-qm | --qemu)
		_CALL_MODULE "qm" "${@:2}"
    break
		;;
	-ip | --findip)
		_FIND_IP
    break
		;;
	-c | --cpu)
    _CALL_MODULE "cpu" "${@:2}"
    break
		;;
	-f | --fan)
		_CALL_MODULE "fan" "${@:2}"
    break
		;;
	-v | --version)
	  printf "$app_version\n"
    break
		;;
	-uv | --update-version)
		_UPDATE_VERSION
		;;
	-r | --remove)
		_INIT
		_REMOVE
		;;
	-h | --help)
		_INIT
		exit 1
		;;
	*)
		_INIT
		_DO
    break
		;;
	esac
	shift
done